Document( 
 Prefix(xs <http://www.w3.org/2001/XMLSchema#>)
 Prefix(rdf <http://www.w3.org/1999/02/22-rdf-syntax-ns#>) 
 Prefix(ex <http://example.org/example#>) 
 Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
 Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 

 Group ( 
  ex:ok(0) :- 
     External( pred:is-literal-string( "Hello world@"^^rdf:PlainLiteral ) )
  ex:ok(1) :- 
     External( pred:is-literal-string( "Hello world"^^xs:string ) )
  ex:ok(2) :- 
     External( pred:is-literal-normalizedString( "Hello world"^^xs:string ) )
  ex:ok(3) :- 
     External( pred:is-literal-token( "Hello world"^^xs:string ) )
  ex:ok(4) :- 
     External( pred:is-literal-language( "en"^^xs:language ) )
  ex:ok(5) :- 
     External( pred:is-literal-Name( "Hello"^^xs:Name ) )
  ex:ok(6) :- 
     External( pred:is-literal-NCName( "Hello"^^xs:NCName ) )
  ex:ok(7) :- 
     External( pred:is-literal-NMTOKEN( "Hello"^^xs:NMTOKEN ) )
  ex:ok(8) :- 
     External( pred:is-literal-not-string( "1"^^xs:integer ) )
  ex:ok(9) :- 
     External( pred:is-literal-not-normalizedString( "1"^^xs:integer ) )
  ex:ok(10) :- 
     External( pred:is-literal-not-token( "1"^^xs:integer ) )
  ex:ok(11) :- 
     External( pred:is-literal-not-language( "1"^^xs:integer ) )
  ex:ok(12) :- 
     External( pred:is-literal-not-Name( "1"^^xs:integer ) )
  ex:ok(13) :- 
     External( pred:is-literal-not-NCName( "1"^^xs:integer ) )
  ex:ok(14) :- 
     External( pred:is-literal-not-NMTOKEN( "1"^^xs:integer ) )
  ex:ok(15) :- 
     External( pred:is-literal-string(  External( xs:string ("1"^^xs:integer ) ) ) )
  ex:ok(16) :- 
     External( pred:is-literal-normalizedString(  External( xs:normalizedString ("1"^^xs:integer ) ) ) )
  ex:ok(17) :- 
     External( pred:is-literal-token( External( xs:token(  "de"^^xs:hexBinary ) ) ) )
  ex:ok(18) :- 
     External( pred:is-literal-language( External ( xs:language ( "de"^^xs:hexBinary ) ) ) )
  ex:ok(19) :- 
     External( pred:is-literal-Name( External ( xs:Name ( "de"^^xs:hexBinary ) ) ) )
  ex:ok(20) :- 
     External( pred:is-literal-NCName( External ( xs:NCName ( "de"^^xs:hexBinary ) ) ) )
  ex:ok(21) :- 
     External( pred:is-literal-NMTOKEN( External ( xs:NMTOKEN ( "de"^^xs:hexBinary ) ) ) )
  ex:ok(22) :- 
     External( pred:iri-string( <http://www.example.org> "http://www.example.org"  ) )
  ex:ok(23) :- 
     -1 = External ( func:compare( "bar" "foo" ) )
  ex:ok(24) :- 
     1 = External ( func:compare( "foo" "bar" ) )
  ex:ok(25) :- 
     0 = External ( func:compare( "bar" "bar" ) )
  ex:ok(26) :- 
     "foobar" = External ( func:concat( "foo" "bar" ) )
  ex:ok(27) :- 
     "foo,bar" = External ( func:string-join( "foo" "bar" "," ) )
  ex:ok(28) :- 
     "obar" = External ( func:substring( "foobar" 3 ) )
  ex:ok(29) :- 
     "fo" = External ( func:substring( "foobar" 0 3 ) )
  ex:ok(30) :- 
     3 = External ( func:string-length( "foo" ) )
  ex:ok(31) :- 
     "FOOBAR" = External ( func:upper-case( "FooBar" ) )
  ex:ok(32) :- 
     "foobar" = External ( func:lower-case( "FooBar" ) )
  ex:ok(33) :- 
     "RIF%20Basic%20Logic%20Dialect" = External ( func:encode-for-uri( "RIF Basic Logic Dialect" ) )
  ex:ok(34) :- 
     "http://www.example.com/~b%C3%A9b%C3%A9" = External ( func:iri-to-uri ( "http://www.example.com/~bébé" ) )
  ex:ok(35) :- 
     "javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b%C3%A9b%C3%A9');" = External ( func:escape-html-uri ( "javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~bébé');" ) ) 
  ex:ok(36) :- 
     "foo" = External ( func:substring-before( "foobar" "bar" ) )
  ex:ok(37) :- 
     "bar" = External ( func:substring-after( "foobar" "foo" ) )
  ex:ok(38) :- 
     "[1=ab][2=]cd" = External ( func:replace( "abcd" "(ab)|(a)" "[1=$1][2=$2]" ) )
  ex:ok(39) :- 
     External( pred:contains ( "foobar" "foo" ) )
  ex:ok(40) :- 
     External( pred:starts-with ( "foobar" "foo" ) )
  ex:ok(41) :- 
     External( pred:ends-with ( "foobar" "bar" ) )
  ex:ok(42) :- 
     External( pred:matches ( "abracadabra" "^a.*a$" ) )
 )
)
