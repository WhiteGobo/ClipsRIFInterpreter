;Create a clips script from owl document
;
;Load owl data by asserting each rdf triple as TripleTemplate. then (run)
;The script can be accessed via (create-clips-script "some description")


(deftemplate TripleTemplate
        (slot subject)
        (slot predicate)
        (slot object)
        (slot context))

(defclass RULELIST (is-a USER)
	(multislot rulelist (storage shared)))
(defmessage-handler RULELIST create-rules ()
	(bind ?ret ";autogenerated")
	(loop-for-count (?i 1 (length$ ?self:rulelist)) do
		(bind ?x (nth$ ?i ?self:rulelist))
		(bind ?ret (str-cat ?ret (send ?x create-rule)))
	)
	(str-cat ?ret)
)
(deffunction add-to-rulelist (?newrule)
	(bind ?container (make-instance of RULELIST))
	(bind ?rl (send ?container get-rulelist))
	(bind ?rl (insert$ ?rl (+ (length$ ?rl) 1) ?newrule))
	(send ?container put-rulelist ?rl)
)

(defclass RULE-TEMPLATE (is-a USER)
	;(slot name (default (gensym)))
	(slot rulename (access initialize-only) (type STRING))
	(multislot lefthandside (default (create$)))
	(multislot righthandside (default (create$))))

(defmessage-handler RULE-TEMPLATE append-lefthandside (?newcondition)
	(bind ?i (+ (length$ ?self:lefthandside) 1))
	(bind ?self:lefthandside (insert$ ?self:lefthandside ?i ?newcondition))
)
(defmessage-handler RULE-TEMPLATE append-righthandside (?newaction)
	(bind ?i (+ (length$ ?self:righthandside) 1))
	(bind ?self:righthandside (insert$ ?self:righthandside ?i ?newaction))
)

(deffunction printrule (?rulename ?lhs ?rhs) (str-cat "
(defrule " ?rulename"
" ?lhs 
"	=>
" ?rhs "
)"))
(defmessage-handler RULE-TEMPLATE create-rule ()
	(bind ?lhs (send ?self get-lhs))
	(bind ?rhs (send ?self get-rhs))
	(printrule ?self:rulename ?lhs ?rhs))


(defmessage-handler RULE-TEMPLATE get-lhs ()
	(bind ?ret " ")
	(loop-for-count (?i 1 (length$ ?self:lefthandside)) do
		(bind ?x (nth$ ?i ?self:lefthandside))
		(bind ?ret (str-cat ?ret (send ?x to-string)))
	)
	(str-cat ?ret " "))

(defmessage-handler RULE-TEMPLATE get-rhs ()
	(bind ?ret " ")
	(loop-for-count (?i 1 (length$ ?self:righthandside)) do
		(bind ?x (nth$ ?i ?self:righthandside))
		(bind ?ret (str-cat ?ret (send ?x to-action)))
	)
	(str-cat ?ret " "))

(defclass LHS-CONDITION (is-a USER))
(defclass LHS-TRIPLE (is-a LHS-CONDITION)
	(slot subject)
	(slot predicate)
	(slot object))

(defmessage-handler LHS-TRIPLE to-string ()
	(str-cat
"	(TripleTemplate 
		(subject "(send ?self:subject var-to-string)")
		(predicate "(send ?self:predicate var-to-string) ")
		(object " (send ?self:object var-to-string) "))
"
	))

(defclass RHS-ACTION (is-a USER))
(defclass RHS-ASSERT (is-a RHS-ACTION)
	(slot subject)
	(slot predicate)
	(slot object))

(defmessage-handler RHS-ASSERT to-action ()
	(str-cat
"	(assert (TripleTemplate
		(subject "(send ?self:subject var-to-string)")
		(predicate "(send ?self:predicate var-to-string)")
		(object "(send ?self:object var-to-string)")))"
	))

(defclass VARIABLE (is-a USER)
	(slot varname))

(defmessage-handler SYMBOL var-to-string ()
	(str-cat ?self)
)
(defmessage-handler VARIABLE var-to-string ()
	(str-cat "?" ?self:varname)
)

(defrule rule_subproperty
        (TripleTemplate
                (subject ?SubProperty)
                (predicate <http://www.w3.org/2000/01/rdf-schema#subPropertyOf>)
                (object ?SuperProperty))
	=>
	;(make-instance exq of RULE-TEMPLATE)
	(bind ?varsubj (make-instance of VARIABLE (varname "subj")))
	(bind ?varobj (make-instance of VARIABLE (varname "obj")))
	(bind ?rulename (str-cat "subPropertyOf-" (gensym)))
	(bind ?rule (make-instance of RULE-TEMPLATE
		(rulename ?rulename)
	))
	(bind ?findsubprop (make-instance of LHS-TRIPLE
		(subject ?varsubj)
		(predicate ?SubProperty)
		(object ?varobj)
	))
	(bind ?assertsuperprop (make-instance of RHS-ASSERT
		(subject ?varsubj)
		(predicate ?SuperProperty)
		(object ?varobj)
	))
	(send ?rule append-lefthandside ?findsubprop)
	(send ?rule append-righthandside ?assertsuperprop)
	(add-to-rulelist ?rule)
)


(defrule rule_subclass
        (TripleTemplate
                (subject ?SubClass)
                (predicate <http://www.w3.org/2000/01/rdf-schema#subClassOf>)
                (object ?SuperClass))
	=>
	;(make-instance exq of RULE-TEMPLATE)
	(bind ?varsubj (make-instance of VARIABLE (varname "subj")))
	(bind ?rulename (str-cat "subClassOf-" (gensym)))
	(bind ?rule (make-instance of RULE-TEMPLATE
		(rulename ?rulename)
	))
	(bind ?findsubclass (make-instance of LHS-TRIPLE
		(subject ?varsubj)
		(predicate <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>)
		(object ?SubClass)
	))
	(bind ?assertsuperclass (make-instance of RHS-ASSERT
		(subject ?varsubj)
		(predicate <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>)
		(object ?SuperClass)
	))
	(send ?rule append-lefthandside ?findsubclass)
	(send ?rule append-righthandside ?assertsuperclass)
	(add-to-rulelist ?rule)
)

(deftemplate FactChainElement
	(slot rule)
	(slot currentstep)
	(slot objectproperty)
	(slot subjvar)
	(slot currentvar))

(defrule propertychain_init
        (TripleTemplate
                (subject ?objectProperty)
                (predicate <http://www.w3.org/2002/07/owl#propertyChainAxiom>)
                (object ?rdflist))
        (TripleTemplate
                (subject ?rdflist)
                (predicate <http://www.w3.org/1999/02/22-rdf-syntax-ns#first>)
                (object ?firstProperty))
        (TripleTemplate
                (subject ?rdflist)
                (predicate <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest>)
                (object ?restProperties))
        =>
	(bind ?varsubj (make-instance of VARIABLE (varname "subj")))
	(bind ?vartmp (make-instance of VARIABLE (varname (str-cat "tmp-" (gensym)))))
	(bind ?rulename (str-cat "propertyChainAxiom-" (gensym)))
	(bind ?rule (make-instance of RULE-TEMPLATE
		(rulename ?rulename)
	))
	(bind ?findfirstproperty (make-instance of LHS-TRIPLE
		(subject ?varsubj)
		(predicate ?firstProperty)
		(object ?vartmp)
	))
	(send ?rule append-lefthandside ?findfirstproperty)
	(assert (FactChainElement
		(rule ?rule)
		(currentstep ?restProperties)
		(objectproperty ?objectProperty)
		(subjvar ?varsubj)
		(currentvar ?vartmp)
	))
)
(defrule propertychain_iter
	(FactChainElement
		(rule ?rule)
		(currentstep ?listProperties)
		(objectproperty ?objectProperty)
		(subjvar ?varsubj)
		(currentvar ?varlast))
        (TripleTemplate
                (subject ?listProperties)
                (predicate <http://www.w3.org/1999/02/22-rdf-syntax-ns#first>)
                (object ?currentProperty))
        (TripleTemplate
                (subject ?listProperties)
                (predicate <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest>)
                (object ?restProperties))
        =>
	(bind ?vartmp (make-instance of VARIABLE (varname (str-cat "tmp-" (gensym)))))
	(bind ?findnextproperty (make-instance of LHS-TRIPLE
		(subject ?varlast)
		(predicate ?currentProperty)
		(object ?vartmp)
	))
	(send ?rule append-lefthandside ?findnextproperty)
        (if (= 0 (str-compare ?restProperties <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>))
                then 
			(send ?vartmp put-varname "obj")
			(bind ?assertproperty (make-instance of RHS-ASSERT
				(subject ?varsubj)
				(predicate ?objectProperty)
				(object ?vartmp)
			))
			(send ?rule append-righthandside ?assertproperty)
			(add-to-rulelist ?rule)
                else 
			(assert (FactChainElement
				(rule ?rule)
				(currentstep ?restProperties)
				(objectproperty ?objectProperty)
				(subjvar ?varsubj)
				(currentvar ?vartmp))
                )
        )
)

(deffunction create-clips-script (?description)
	;replace newline with commented newlines:
	(bind ?desc (str-cat ";" ?description))
	(bind ?desc (str-replace ?desc "
" "
;"))
	(bind ?templates "")
	(bind ?rules (send (make-instance of RULELIST) create-rules))
	(str-cat ?desc "
" ?templates "
" ?rules)
)
