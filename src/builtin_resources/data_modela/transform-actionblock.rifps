Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Group (
      (* ex:transform-retract-var *) Forall ?rifretract ?riftarget ?subj(
        If And(
          ?rifretract # rif:Retract
          ?rifretract[rif:target -> ?riftarget]
          ?riftarget[ex:as-expression -> ?subj]
        ) Then Do (
          (?clipsretract New())
          (?clipsexpand New())
          (?clipsfindfacts New())
          (?clipsdeftemplate New())
          (?factvariable New())
          (?factquery New())
          (?slotsubj New())
          Assert( ?rifretract[ex:as-action -> External(func:make-list(?clipsretract))] )
          Assert( ?clipsretract[cs:function-name -> "retract"] )
          Assert( ?clipsretract[cs:function-args -> External( func:make-list(?clipsexpand))] )
          Assert( ?clipsexpand[cs:function-name -> "expand$"] )
          Assert( ?clipsexpand[cs:function-args -> External( func:make-list(?clipsfindfacts))] )
          Assert( ?clipsfindfacts # cs:FindAllFacts )
          Assert( ?clipsfindfacts[cs:fact-set-template -> ?clipsdeftemplate] )
          Assert( ?clipsdeftemplate[cs:deftemplate-name -> "TripleTemplate"] )
          Assert( ?clipsdeftemplate[cs:fact-set-member-variable -> ?factvariable] )
          Assert( ?clipsfindfacts[cs:query -> ?factquery] )
          Assert( ?factvariable[cs:variable-name -> "fct"] )
          Assert( ?factquery[cs:function-name -> "eq"] )
          Assert( ?factquery[cs:function-args -> External(func:make-list(?slotsubj ?subj))] )
          Assert( ?slotsubj[cs:member-variable -> ?factvariable] )
          Assert( ?slotsubj[cs:member-slot-name -> "subject"] )
        )
      )
      (* ex:transform-retract-frame *) Forall ?rifretract ?riftarget(
        If And(
          ?rifretract # rif:Retract
          ?rifretract[rif:target -> ?riftarget]
          ?riftarget # rif:Frame
        ) Then Do (
          (?clipsretract New())
          (?clipsexpand New())
          Assert( ?rifretract[ex:as-action -> External(func:make-list(?clipsretract))] )
          Assert( ?clipsretract[cs:function-name -> "retract"] )
          Assert( ?clipsretract[cs:function-args -> External( func:make-list(?clipsexpand))] )
          Assert( ?clipsexpand[cs:function-name -> "expand$"] )
          Assert( ?clipsexpand[cs:function-args -> External( func:make-list())] )
        )
      )
    )
)
