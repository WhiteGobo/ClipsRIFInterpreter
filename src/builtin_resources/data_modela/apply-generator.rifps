Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(modelA <http://white.gobo/modelA#>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Prefix(ex <http://example.com/>)
    Prefix(exa <http://example.com/a#>)
    Prefix(self <http://example.com/apply-generator#>)
    Group (
      (* self:rule01 *) Forall ?group ?rifrule ?sentences (
        ?rifrule # modelA:RuleGenerator :-
        And (
          ?group[rif:sentences -> ?sentences]
          Or (
            ?rifrule # rif:Implies
            ?rifrule # rif:Forall
          )
          External(pred:is-list(?sentences))
          External(pred:list-contains(?sentences ?rifrule))
        )
      )
      (* self:rule02 *) Forall ?group ?sentences ?rifclause (
        If And (
          ?group[rif:sentences -> ?sentences]
          Or (
            ?rifclause # rif:Equal
          )
          External(pred:is-list(?sentences))
          External(pred:list-contains(?sentences ?rifclause))
        ) Then Do(
          Assert( ?rifclause # ex:equal-not-implemented-as-clause )
          Execute(crifi:set-graph-in-errorstate("modelA cant process rif:Equal as clause(ex:equal-not-implemented-as-clause)"))
        )
      )
      Forall ?clause ?assert (
        ?assert # modelA:RHSPatternGenerator :-
        And (
          ?clause[rif:then -> ?assert]
          Or (
            ?assert # rif:Frame
            ?assert # rif:Atom
            ?assert # rif:Member
          )
        )
      )
      (* self:rule03 *) Forall ?group ?sentences ?rifclause (
        ?rifclause # modelA:RHSPatternGenerator :-
        And (
          ?group[rif:sentences -> ?sentences]
          Or (
            ?rifclause # rif:Frame
            ?rifclause # rif:Atom
            ?rifclause # rif:Member
            ?rifclause # rif:Subclass
          )
          External(pred:is-list(?sentences))
          External(pred:list-contains(?sentences ?rifclause))
        )
      )
      (* self:rule04 *) Forall ?rifframe ?slot ?slotlist (
        ?slot # modelA:RHSPatternGenerator :-
        And (
          ?rifframe # modelA:RHSPatternGenerator
          ?rifframe[rif:slots -> ?slotlist]
          ?slot # rif:Slot
          External(pred:list-contains(?slotlist ?slot))
        )
      )
      (* self:rule05 *) Forall ?patterngen ?arglist ?term (
        ?term # ex:ExpressionGenerator :-
        And (
          ?patterngen # modelA:RHSPatternGenerator
          ?patterngen[rif:args -> ?arglist]
          Or (
            ?term # rif:List
            ?term # rif:External
          )
          External(pred:list-contains(?arglist ?term))
        )
      )
      (* self:rule06 *) Forall ?riflist ?arglist ?term (
        ?term # ex:ExpressionGenerator :- 
        And (
          ?riflist # ex:ExpressionGenerator
          ?riflist[rif:items -> ?arglist]
          Or (
            ?term # rif:List
            ?term # rif:External
          )
          External(pred:list-contains(?arglist ?term))
        )
      )
      (* self:rule07 *) Forall ?patterngen ?term (
        ?term # ex:ExpressionGenerator :-
        And (
          ?patterngen # modelA:RHSPatternGenerator
          Or (
            ?patterngen[rif:op -> ?term]
            ?patterngen[rif:object -> ?term]
            ?patterngen[rif:slotkey -> ?term]
            ?patterngen[rif:slotvalue -> ?term]
            ?patterngen[rif:left -> ?term]
            ?patterngen[rif:right -> ?term]
            ?patterngen[rif:class -> ?term]
            ?patterngen[rif:instance -> ?term]
            ?patterngen[rif:sub -> ?term]
            ?patterngen[rif:super -> ?term]
          )
        )
      )
      (* self:rule08 *) Forall ?rifimply ?formula (
        ?formula # modelA:ConditionGenerator :-
        Or(
          ?rifimply[rif:if -> ?formula]
          ?rifimply[rif:pattern -> ?formula]
        )
      )
      (* self:rule09 *) Forall ?formula ?child ?formulalist (
        ?child # modelA:ConditionGenerator :-
        And (
          ?formula # modelA:ConditionGenerator
          ?formula[ex:inherits-data -> ?child]
          ?formula[rif:formulas -> ?formulalist]
          External(pred:list-contains(?formulalist ?child))
        )
      )
      (* self:rule10 *) Forall ?formula ?child (
        ?child # modelA:ConditionGenerator :-
        And (
          ?formula # modelA:ConditionGenerator
          ?formula[rif:formula -> ?child]
        )
      )
      (* self:rule11 *) Forall ?rifformula ?slotlist ?slot (
        ?slot # modelA:ConditionGenerator :-
        And (
          ?rifformula # modelA:ConditionGenerator
          ?rifformula[rif:slots -> ?slotlist]
          ?slot # rif:Slot
          External(pred:list-contains(?slotlist ?slot))
        )
      )
      (* self:rule12 *) Forall ?rifformula ?child (
        If And (
          ?rifformula # modelA:PatternGenerator
          Or (
            ?rifformula[rif:object -> ?child]
            ?rifformula[rif:left -> ?child]
            ?rifformula[rif:right -> ?child]
            ?rifformula[rif:op -> ?child]
            ?rifformula[rif:instance -> ?child]
            ?rifformula[rif:class -> ?child]
            ?rifformula[rif:sub -> ?child]
            ?rifformula[rif:super -> ?child]
            ?rifformula[rif:slotkey -> ?child]
            ?rifformula[rif:slotvalue -> ?child]
          )
        ) Then Do (
          Assert( ?child # modelA:ConstraintGenerator )
          Assert( ?rifformula[modelA:pattern-uses-constraint -> ?child] )
        )
      )
      (* self:rule13 *) Forall ?rifformula (
        ?rifformula # modelA:PatternGenerator :-
        And (
          Or (
            ?rifformula # rif:Atom
            ?rifformula # rif:Frame
          )
          ?rifformula # modelA:ConditionGenerator
        )
      )
      (* self:rule14 *) Forall ?rifformula ?child ?arglist(
        If And (
          ?rifformula # modelA:PatternGenerator
          ?rifformula[rif:args -> ?arglist]
          Or (
            ?child # rif:External
            ?child # rif:Variable
            ?child # rif:List
          )
          External(pred:list-contains(?arglist ?child))
        ) Then Do (
          Assert( ?child # modelA:ConstraintGenerator )
          Assert( ?rifformula[modelA:pattern-uses-constraint -> ?child] )
        )
      )
      (* self:rule15 *) Forall ?rifformula ?superlist ?itemlist ?child (
        If And (
          ?rifformula # modelA:PatternGenerator
          ?rifformula[modelA:pattern-uses-constraint -> ?superlist]
          ?superlist[rif:items -> ?itemlist]
          Or (
            ?child # rif:External
            ?child # rif:Variable
            ?child # rif:List
          )
          External(pred:list-contains(?itemlist ?child))
        ) Then Do (
          Assert( ?child # modelA:ConstraintGenerator )
          Assert( ?rifformula[modelA:pattern-uses-constraint -> ?child] )
        )
      )
      (* self:rule16 *) Forall ?rifformula ?child (
        ?rifformula # modelA:MultiPatternGenerator :-
        And (
          ?rifformula[modelA:pattern-uses-constraint -> ?child]
          ?child # rif:List
        )
      )
      (* self:rule17 *) Forall ?rifimply ?action (
        ?action # modelA:ActionGenerator :-
        ?rifimply[rif:then -> ?action]
      )
      (* self:rule18 *) Forall ?action ?target (
        ?target # modelA:RHSPatternGenerator :-
        And (
          Or (
            ?action # rif:Assert
            ?action # rif:Retract
            ?action # rif:Modify
          )
          ?action[rif:target -> ?target]
        )
      )
      (* self:rule19 *) Forall ?action (
        ?action # modelA:ActionGenerator :-
        Or (
            ?action # rif:Assert
            ?action # rif:Retract
            ?action # rif:Modify
            ?action # rif:Execute
        )
      )
      (* self:rule20 *) Forall ?rifforall ?action (
        ?action # modelA:ActionGenerator :-
        And(
          ?rifforall # rif:Forall
          ?rifforall[rif:formula -> ?action]
          Not(?action # rif:Implies)
          Not(?action # rif:Forall)
        )
      )
      (* self:rule21 *) Forall ?rifexternal ?rifatom ?child (
        ?child # ex:ExpressionGenerator :-
        And (
          ?rifexternal # rif:External
          ?rifexternal[rif:content -> ?rifatom]
          ?rifexternal[ex:inherits-data -> ?child]
          Not(?child # rif:Var)
        )
      )
    )
)
