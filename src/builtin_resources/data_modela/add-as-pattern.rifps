Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Group (
      Forall ?constraint ?defrule ?var (
        If And(
          ?defrule[ex:transfer-bound-variables-from -> ?constraint]
          ?constrant[ex:binds-variable -> ?var]
        ) Then Do (
          Assert( ?defrule[ex:bound-variable -> ?var] )
        )
      )
      Forall ?content ?rifop ?rifarglist ?functionname ?functionsymbol (
        If And (
          ?rifexternal[rdf:type -> rif:External]
          ?rifexternal[rif:content -> ?content]
          ?content[rif:op -> ?rifop]
          ?rifop[ex:as-expression -> ?functionsymbol]
          ?functionsymbol[cs:symbol -> ?functionname]
          ?content[rif:args -> ?rifarglist]
          External(pred:is-list(?rifarglist))
        ) Then Do (
          (?function New())
          Assert( ?rifexternal[ex:as-action -> ?function] )
          Assert( ?rifexternal[ex:as-expression -> ?function] )
          Assert( ?function[cs:function-name -> ?functionname] )
          Assert( ?function[cs:function-args -> External(func:make-list())] )
          Assert( ?function[ex:add-args-from -> ?rifarglist] )
        )
      )
      Forall ?function ?rifarglist ?firstarg (
        If And (
          ?function[ex:add-args-from -> ?rifarglist]
          External(pred:is-list(?rifarglist))
          ?firstarg[ex:as-expression -> ?clipsexpression]
          ?firstarg = External(func:get(?rifarglist 0))
        ) Then Do (
          (?functionargs ?function[cs:function-args -> ?functionargs])
          Modify(?function[cs:function-args -> External(func:append(?functionargs ?clipsexpression))])
          Modify(?function[ex:add-args-from -> External(func:remove(?rifarglist 0))])
        )
      )
      Forall ?rifexternal ?action ?defrule (
        If And (
          ?rifexternal[ex:add-as-pattern -> ?defrule]
          ?rifexternal[rdf:type -> rif:External]
          ?rifexternal[ex:as-action -> ?action]
          Not (Exists ?var (
            ?action[ex:needs-variable -> ?var]
          ))
        ) Then Do (
          (?pattern New())
          (?oldpatternlist ?defrule[cs:conditional-element -> ?oldpatternlist])
          Assert( ?pattern[rdf:type -> cs:TestCE] )
          Modify( ?defrule[cs:conditional-element -> External(func:append(?oldpatternlist ?pattern))] )
          Assert(?pattern[cs:function-call -> ?action])
        )
      )
      Forall ?rifframe ?slot ?defrule ?slotkey ?slotvalue (
        If And (
          ?rifframe[ex:add-as-pattern -> ?defrule]
          ?rifframe[rif:object -> ?frameobject]
          ?rifframe[rif:slots -> ?slotlist]
          External(pred:is-list(?slotlist))
          ?slot[rif:slotkey -> ?slotkey]
          ?slot[rif:slotvalue -> ?slotvalue]
          External(pred:list-contains(?slotlist ?slot))
          ?frameobject[ex:as-constraint -> ?constraintsubject]
          ?slotkey[ex:as-constraint -> ?constraintpredicate]
          ?slotvalue[ex:as-constraint -> ?constraintobject]
          Not (Exists ?x (
            ?constraintsubject[ex:needs-variable -> ?x]
          ))
          Not (Exists ?y (
            ?constraintpredicate[ex:needs-variable -> ?y]
          ))
          Not (Exists ?z (
            ?constraintobject[ex:needs-variable -> ?z]
          ))
        ) Then Do (
          (?pattern New())
          (?slotsubject New())
          (?slotpredicate New())
          (?slotobject New())
          (?oldpatternlist ?defrule[cs:conditional-element -> ?oldpatternlist])
          Assert( ?pattern[rdf:type -> cs:TemplatePatternCE])
          Assert( ?pattern[cs:deftemplate-name -> "TripleTemplate"] )
          Assert( ?pattern[cs:slot -> External(func:make-list(?slotsubject ?slotpredicate ?slotobject))] )
          Assert( ?slotsubject[cs:slot-name -> "subject"] )
          Assert( ?slotsubject[cs:constraint -> ?constraintsubject])
          Assert( ?slotpredicate[cs:slot-name -> "predicate"] )
          Assert( ?slotpredicate[cs:constraint -> ?constraintpredicate])
          Assert( ?slotobject[cs:slot-name -> "object"] )
          Assert( ?slotobject[cs:constraint -> ?constraintobject])
          Modify( ?defrule[cs:conditional-element -> External(func:append(?oldpatternlist ?pattern))] )
          Assert( ?defrule[ex:transfer-bound-variables-from -> ?constraintsubject])
          Assert( ?defrule[ex:transfer-bound-variables-from -> ?constraintpredicate])
          Assert( ?defrule[ex:transfer-bound-variables-from -> ?constraintobject])
        )
      )
    )
)
