Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    (* ex:init-defrules *) Group 10 (
      (* ex:init-defrule-per-implies *) Forall ?group ?rule ?formula(
        If And(
          ?group[rif:sentences -> ?sentences]
          Or (
            ?rule # rif:Implies
            ?rule # rif:Forall
          )
          External(pred:is-list(?sentences))
          External(pred:list-contains(?sentences ?rule))
        ) Then Do (
          (?defrule New())
          (?actionlist New())
          Assert( ?rule[ex:as-defrule -> ?defrule] )
          Assert( ?rule[ex:add-rule-info -> ?defrule] )
          Assert( ?defrule # cs:Defrule )
          Assert( ?defrule[cs:conditional-element -> External(func:make-list())])
        )
      )
      Forall ?rifrule ?defrule ?action (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:then -> ?rifaction]
          ?rifaction[ex:as-action -> ?action]
        ) Then Do (
          Assert( ?defrule[cs:action -> ?action] )
        )
      )
      Forall ?rifrule ?defrule ?action (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:formula -> ?rifaction]
          ?rifaction[ex:as-action -> ?action]
        ) Then Do (
          Assert( ?defrule[cs:action -> ?action] )
        )
      )
      Forall ?rifrule ?defrule ?rifclause (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:formula -> ?rifclause]
          Or (
            ?rifclause # rif:Forall
            ?rifclause # rif:Implies
          )
        ) Then Do (
          Assert( ?rifclause[ex:add-rule-info -> ?defrule] )
        )
      )
      Forall ?rifrule ?defrule ?condition ?clipspattern (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:if -> ?rifcondition]
        ) Then Do (
          Assert( ?rifcondition[ex:add-as-pattern -> ?defrule] )
        )
      )
      Forall ?rifrule ?defrule ?condition ?clipspattern ?formulalist(
        If And (
          ?rifcondition[ex:add-as-pattern -> ?defrule]
          ?rifcondition # rif:And
          ?defrule # cs:Defrule
          ?rifcondition[rif:formulas -> ?formulalist]
          External(pred:is-list(?formulalist))
          Or (
            ?formula # rif:And
            ?formula # rif:Or
            ?formula # rif:Exists
            ?formula # rif:External
            ?formula # rif:INeg
            ?formula # rif:Frame
            ?formula # rif:Atom
            ?formula # rif:SubClass
            ?formula # rif:Equal
          )
          External(pred:list-contains(?formulalist ?formula))
        ) Then Do (
          Assert( ?formula[ex:add-as-pattern -> ?defrule] )
          Assert( ?rifcondition[ex:used-as-pattern-in -> ?defrule] )
        )
      )
      Forall ?rifrule ?defrule ?rifclause (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:then -> ?rifclause]
          ?rifclause # rif:Implies
        ) Then Do (
          Assert( ?rifclause[ex:add-rule-info -> ?defrule] )
        )
      )
      Group (
        Forall ?defrule ?defruleindex (
          If And (
            ?factvar # cs:Defrule
            ex:currentdefruleindex(?defruleindex)
            Not (Exists ?defrulename ( ?defrule[cs:rule-name -> ?defrulename] ))
          ) Then Do (
            Retract( ex:currentdefruleindex(?defruleindex) )

            Assert( ex:currentdefruleindex(External(func:numeric-add(?defruleindex 1))))
            Assert( ?factvar[cs:rule-name -> External(func:concat("rule" ?defruleindex))] )

          )
        )
        ex:currentdefruleindex(0)
      )
    )
)
