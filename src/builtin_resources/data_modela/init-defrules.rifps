Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Prefix(self <http://example.com/init-defrules#>)
    Group 10 (
      (* self:rule01 *) Forall ?rifrule ?defrule ?action ?rifaction (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          Or (
            ?rifrule[rif:then -> ?rifaction]
            ?rifrule[rif:formula -> ?rifaction]
          )
          ?rifaction[ex:as-action -> ?action]
        ) Then Do (
          Assert( ?defrule[cs:action -> ?action] )
        )
      )
      (* self:rule02 *) Forall ?rifrule ?defrule ?rifclause (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:formula -> ?rifclause]
          Or (
            ?rifclause # rif:Forall
            ?rifclause # rif:Implies
          )
        ) Then Do (
          Assert( ?rifclause[ex:add-rule-info -> ?defrule] )
        )
      )
      (* self:rule03 *) Forall ?rifrule ?defrule ?rifcondition (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:if -> ?rifcondition]
        ) Then Do (
          Assert( ?rifcondition[ex:add-as-pattern -> ?defrule] )
        )
      )
      (* self:rule04 *) Forall ?rifcondition ?defrule ?formulalist ?formula (
        If And (
          ?rifcondition[ex:add-as-pattern -> ?defrule]
          ?rifcondition # rif:And
          ?defrule # cs:Defrule
          ?rifcondition[rif:formulas -> ?formulalist]
          External(pred:is-list(?formulalist))
          Or (
            ?formula # rif:And
            ?formula # rif:Or
            ?formula # rif:Exists
            ?formula # rif:External
            ?formula # rif:INeg
            ?formula # rif:Frame
            ?formula # rif:Atom
            ?formula # rif:SubClass
            ?formula # rif:Equal
          )
          External(pred:list-contains(?formulalist ?formula))
        ) Then Do (
          Assert( ?formula[ex:add-as-pattern -> ?defrule] )
          Assert( ?rifcondition[ex:used-as-pattern-in -> ?defrule] )
        )
      )

      (* self:rule05 *) Forall ?rifrule ?defrule ?rifclause (
        If And (
          ?rifrule[ex:add-rule-info -> ?defrule]
          ?rifrule[rif:then -> ?rifclause]
          ?rifclause # rif:Implies
        ) Then Do (
          Assert( ?rifclause[ex:add-rule-info -> ?defrule] )
        )
      )
      Group (
        (* self:rule06 *) Forall ?defrule ?defruleindex (
          If And (
            ?factvar # cs:Defrule
            ex:currentdefruleindex(?defruleindex)
            Not (Exists ?defrulename ( ?defrule[cs:rule-name -> ?defrulename] ))
          ) Then Do (
            Retract( ex:currentdefruleindex(?defruleindex) )

            Assert( ex:currentdefruleindex(External(func:numeric-add(?defruleindex 1))))
            Assert( ?factvar[cs:rule-name -> External(func:concat("rule" ?defruleindex))] )

          )
        )
        ex:currentdefruleindex(0)
      )

      (* self:rule07 *) Forall ?rifformula ?rifparent (
        If And (
          Or (
            ?rifparent[rif:then -> ?rifformula]
            ?rifparent[rif:target -> ?rifformula]
          )
          Or (
            ?rifformula # rif:Atom
            ?rifformula # rif:Frame
          )
        ) Then Do (
          Assert(?rifformula # ex:RHSPatternGenerator)
        )
      )
      (* self:rule08 *) Forall ?rifformula ?rifparent ?sentencelist (
        If And (
          ?rifparent[rif:sentences -> ?sentencelist]
          Or (
            ?rifformula # rif:Atom
            ?rifformula # rif:Frame
          )
          External(pred:list-contains(?sentencelist ?rifformula))
        ) Then Do (
          Assert(?rifformula # ex:RHSPatternGenerator)
        )
      )

      (* self:rule09 *) Forall ?rifformula ?defrule ?constraintlist (
        If And (
          ?rifformula[ex:add-as-pattern -> ?defrule]
          ?rifformula[rif:args -> ?constraintlist]
          Or (
            ?rifterm # rif:Var
            ?rifterm # rif:Const
            ?rifterm # rif:List
            ?rifterm # rif:External
          )
          External(pred:list-contains(?constraintlist ?rifterm))
        ) Then Do (
          Assert(?rifterm # ex:ConstraintGenerator)
        )
      )
      (* self:rule10 *) Forall ?rifformula ?defrule ?slotlist ?slot ?rifterm (
        If And (
          ?rifformula[ex:add-as-pattern -> ?defrule]
          ?rifformula[rif:slots -> ?slotlist]
          ?slot[rif:slotvalue -> ?rifterm]
          External(pred:list-contains(?slotlist ?slot))
        ) Then Do (
          Assert(?rifterm # ex:ConstraintGenerator)
        )
      )
      (* self:rule11 *) Forall ?rifformula ?defrule ?slotlist ?slot ?rifterm (
        If And (
          ?rifformula[ex:add-as-pattern -> ?defrule]
          ?rifformula[rif:slots -> ?slotlist]
          ?slot[rif:slotkey -> ?rifterm]
          External(pred:list-contains(?slotlist ?slot))
        ) Then Do (
          Assert(?rifterm # ex:ConstraintGenerator)
        )
      )
      (* self:rule12 *) Forall ?rifformula ?defrule ?rifterm (
        If And (
          ?rifformula[ex:add-as-pattern -> ?defrule]
          Or (
            ?rifformula[rif:left -> ?rifterm]
            ?rifformula[rif:right -> ?rifterm]
            ?rifformula[rif:op -> ?rifterm]
            ?rifformula[rif:object -> ?rifterm]
          )
        ) Then Do (
          Assert(?rifterm # ex:ConstraintGenerator)
        )
      )
    )
)
