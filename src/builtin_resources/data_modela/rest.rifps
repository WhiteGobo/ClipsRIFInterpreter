Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Group (

      (* ex:transform-do *) Group (
        (* ex:init-transform-do *) Forall ?rifnode ?actionlist (
          If And(
            ?rifnode[rif:actions -> ?actionlist]
            External(pred:is-list(?actionlist))
            ) Then Do (
              Assert( ?rifnode[ex:in-transform-do -> ?actionlist] )
              Assert( ?rifnode[ex:out-transform-do -> External(func:make-list())] )
            )
        )

          (* ex:end-transform-do *) Forall ?rifnode ?in ?out (
            If And (
              ?rifnode[ex:in-transform-do -> ?in]
              0 = External(func:count(?in))
              ?rifnode[ex:out-transform-do -> ?out]
              ) Then Do (
                Assert(?rifnode[ex:as-action -> ?out])
                Retract( ?rifnode[ex:in-transform-do -> ?in] )
                Retract( ?rifnode[ex:out-transform-do -> ?out] )
                )
            )

          (* ex:iter-transform-do *) Forall ?rifnode ?in ?out ?nextactions ?firstaction (
              If And (
                ?rifnode[ex:in-transform-do -> ?in]
                ?rifnode[ex:out-transform-do -> ?out]
                ?firstaction[ex:as-action -> ?nextactions]
                External( pred:numeric-not-equal(0 External(func:count(?in))) )
                ?firstaction = External(func:get(?in 0))
              ) Then Do (
                Modify( ?rifnode[ex:in-transform-do -> External(func:remove(?in 0))] )
                Modify( ?rifnode[ex:out-transform-do -> External(func:concatenate(?out ?nextactions))] )
              )
            )
          )
        (* ex:create-deffacts-for-groups *) Group (
          (* ex:init-deffacts *) Forall ?group ?sentences ?factable (
            If And (
              ?group[rif:sentences -> ?sentences]
              External(pred:is-list(?sentences))
              Exists ?factable ( And(
                Or(
                  ?factable # rif:Frame
                  ?factable # rif:Member
                  ?factable # rif:Atom
                  ?factable # rif:Subclass
                )
                External(pred:list-contains(?sentences ?factable))
              ))
            ) Then Do (
              (?deffacts New())
              Assert( ?group[ex:combine-deffacts-in -> ?deffacts] )
              Assert( ?deffacts # cs:Deffacts )
              Assert( ?deffacts[cs:rhs-pattern -> External(func:make-list())] )
            )
          )
          (* ex:add-fact-to-deffacts *) Forall ?group ?deffacts ?factable ?newrhspattern ?sentences (
            If And (
              ?group[rif:sentences -> ?sentences]
              ?group[ex:combine-deffacts-in -> ?deffacts]
              Or(
                ?factable # rif:Frame
                ?factable # rif:Member
                ?factable # rif:Subclass
                ?factable # rif:Atom
              )
              External(pred:is-list(?sentences))
              External(pred:list-contains(?sentences ?factable))
              ?factable[ex:as-rhspattern -> ?newrhspattern]
            ) Then Do (
              (?rhspatternlist ?deffacts[cs:rhs-pattern -> ?rhspatternlist] )
              Modify( ?deffacts[cs:rhs-pattern -> External(func:append(?rhspatternlist ?newrhspattern))] )
            )
          )
        )

  )
)
