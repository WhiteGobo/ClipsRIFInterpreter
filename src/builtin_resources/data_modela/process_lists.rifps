Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Prefix(modelA <http://white.gobo/modelA#>)
    Prefix(self <http://example.com/process_lists#>)
    Group 10 (
      Group -101 (
        (* self:rule01 *) Forall ?rif ?arglist (
          If And (
            ?rif["add-args-as-expression-from"^^rif:local -> ?arglist]
            External(pred:numeric-greater-than(External(func:count(?arglist)) 0))
          ) Then Do (
            Assert( ?rif # ex:couldnt-add-all-items )
            Execute(crifi:set-graph-in-errorstate("Missing items for list(ex:couldnt-add-all-items)"))
          )
        )
      )
      (* self:rule02 *) Forall ?riflist ?rest (
        If And (
          ?riflist[rif:rest -> ?rest]
          Not (?rest # rif:Var)
        ) Then Do (
            Execute(crifi:set-graph-in-errorstate("rif:rest is only implemented for domain of type rif:Var"))
        )
      )
      (* self:rule03 *) Forall ?riflist ?itemlist (
        If And (
          ?riflist # modelA:ExpressionGenerator
          ?riflist[rif:items -> ?itemlist]
          External(pred:is-list(?itemlist))
          Not( Exists ?rest (?riflist[rif:rest -> ?rest]))
        ) Then Do (
          (?function New())
          Assert( ?riflist[ex:as-expression -> ?function] )
          Assert( ?function[cs:function-name -> "<http://www.w3.org/2007/rif-builtin-function#make-list>"] )
          Assert( ?function[cs:function-args -> External(func:make-list())] )
          Assert( ?function["add-args-as-expression-from"^^rif:local -> ?itemlist] )
        )
      )
      (* ex:complete-add-args-as-expression-to-list *) Group (
        (* self:rule04 *) Forall ?itemlist ?function ?currentexprlist ?firstasexpression ?firstarg (
          If And (
            ?function["add-args-as-expression-from"^^rif:local -> ?itemlist]
            ?function[cs:function-args -> ?currentexprlist]
            External(pred:numeric-greater-than(External(func:count(?itemlist)) 0))
            ?firstarg[ex:as-expression -> ?firstasexpression]
            ?firstarg = External(func:get(?itemlist 0))
          ) Then Do (
            Modify(?function[cs:function-args -> External(func:append(?currentexprlist ?firstasexpression))])
            Modify(?function["add-args-as-expression-from"^^rif:local -> External(func:remove(?itemlist 0))])
          )
        )
        (* self:rule05 *) Forall ?function  ?itemlist (
          If And (
            ?function["add-args-as-expression-from"^^rif:local -> ?itemlist]
            External(pred:is-list(?itemlist))
            0 = External(func:count(?itemlist))
          ) Then Do (
            Retract(?function["add-args-as-expression-from"^^rif:local -> ?itemlist])
          )
        )
      )

      (* self:rule06 *) Forall ?riflist (
        If And (
          ?riflist # modelA:ConstraintGenerator
          ?riflist # rif:List
        ) Then Do (
          (?listasvar New())
          Assert( ?riflist[ex:as-constraint -> ?listasvar] )
          Assert( ?listasvar # cs:Variable )
          Assert( ?listasvar # ex:Variable )
          Assert( ?riflist # modelA:ConstraintNeedsAdditionalPatterns )
        )
      )
      (* self:rule07 *) Forall ?riflist ?formula ?assign ?listvar ?itemlist ?rest (
        If And (
          ?riflist # modelA:ListAsConstraint
          ?formula[modelA:pattern-uses-constraint -> ?riflist]
          ?riflist # modelA:ConstraintGenerator
          ?riflist # rif:List
          ?riflist[rif:rest -> ?rest]
          ?riflist[ex:as-constraint -> ?listvar]
          ?rest[ex:as-constraint -> ?assign]
          ?riflist[rif:items -> ?itemlist]
          Not(?formula[modelA:bound-variable -> ?assign])
        ) Then Do (
          (?function New())
          (?position New())
          Assert( ?assign[cs:var-as-const-expr -> ?function] )
          Assert( ?function[cs:function-name -> "<http://www.w3.org/2007/rif-builtin-function#sublist>"] )
          Assert( ?function[cs:function-args -> External(func:make-list(?listvar ?position))] )
          Assert( ?position[cs:string -> External(crifi:literal-to-clipsconstant(External(func:count(?itemlist))))])

        )
      )
      (* self:rule08 *) Forall ?riflist ?formula ?assign ?listvar ?itemlist ?rest (
        If And (
          ?formula[modelA:pattern-uses-constraint -> ?riflist]
          ?riflist # modelA:ConstraintGenerator
          ?riflist # rif:List
          ?riflist[rif:rest -> ?rest]
          ?riflist[ex:as-constraint -> ?listvar]
          ?rest[ex:as-constraint -> ?assign]
          ?riflist[rif:items -> ?itemlist]
          ?formula[modelA:bound-variable -> ?assign]
        ) Then Do (
          (?testpattern New())
          (?eq New())
          (?function New())
          (?position New())
          Assert( ?testpattern # cs:TestCE )
          Assert( ?testpattern[cs:function-call -> ?eq] )
          Assert( ?formula[modelA:lhs-pattern-after-conditions -> ?testpattern])

          Assert( ?eq[cs:function-name -> "eq"] )
          Assert( ?eq[cs:function-args -> External(func:make-list(?assign ?function))] )

          Assert( ?function[cs:function-name -> "<http://www.w3.org/2007/rif-builtin-function#sublist>"] )
          Assert( ?function[cs:function-args -> External(func:make-list(?listvar ?position))] )
          Assert( ?position[cs:string -> External(crifi:literal-to-clipsconstant(External(func:count(?itemlist))))])

        )
      )
      (* self:rule09 *) Forall ?riflist ?formula ?assign ?listvar ?itemlist ?rifvar (
        If And (
          ?formula[modelA:pattern-uses-constraint -> ?riflist]
          ?riflist # modelA:ConstraintGenerator
          ?riflist # rif:List
          ?riflist[ex:as-constraint -> ?listvar]
          ?rifvar[ex:as-constraint -> ?assign]
          ?riflist[rif:items -> ?itemlist]
          External(pred:list-contains(?itemlist ?rifvar))
          Not(?formula[modelA:bound-variable -> ?assign])
        ) Then Do (
          (?function New())
          (?position New())
          Assert( ?assign[cs:var-as-const-expr -> ?function] )
          Assert( ?function[cs:function-name -> "<http://www.w3.org/2007/rif-builtin-function#get>"] )
          Assert( ?function[cs:function-args -> External(func:make-list(?listvar ?position))] )
          Assert( ?position[cs:string -> External(crifi:literal-to-clipsconstant(External(func:get(External(func:index-of(?itemlist ?rifvar)) 0))))])

        )
      )
      (* self:rule10 *) Forall ?riflist ?formula ?assign ?listvar ?itemlist ?rifvar (
        If And (
          ?formula[modelA:pattern-uses-constraint -> ?riflist]
          ?riflist # modelA:ConstraintGenerator
          ?riflist # rif:List
          ?riflist[ex:as-constraint -> ?listvar]
          ?rifvar[ex:as-constraint -> ?assign]
          ?riflist[rif:items -> ?itemlist]
          External(pred:list-contains(?itemlist ?rifvar))
          ?formula[modelA:bound-variable -> ?assign]
        ) Then Do (
          (?testpattern New())
          (?eq New())
          (?function New())
          (?position New())
          Assert( ?testpattern # cs:TestCE )
          Assert( ?testpattern[cs:function-call -> ?eq] )
          Assert( ?formula[modelA:lhs-pattern-after-conditions -> ?testpattern])

          Assert( ?eq[cs:function-name -> "eq"] )
          Assert( ?eq[cs:function-args -> External(func:make-list(?assign ?function))] )
          Assert( ?function[cs:function-name -> "<http://www.w3.org/2007/rif-builtin-function#get>"] )
          Assert( ?function[cs:function-args -> External(func:make-list(?listvar ?position))] )
          Assert( ?position[cs:string -> External(crifi:literal-to-clipsconstant(External(func:get(External(func:index-of(?itemlist ?rifvar)) 0))))])

        )
      )

        (* self:rule11 *) Forall ?itemlist ?slotitems ?firstarg ?listconstraints ?clipsconstraint (
          If And (
            ?slotitems["add-args-as-constraints-from"^^rif:local -> ?itemlist]
            ?slotitems[cs:constraints -> ?listconstraints]
            External(pred:is-list(?itemlist))
            External(pred:numeric-greater-than(External(func:count(?itemlist)) 0))
            ?firstarg[ex:as-constraint -> ?clipsconstraint]
            ?firstarg = External(func:get(?itemlist 0))
          ) Then Do (

            Modify(?slotitems[cs:constraints -> External(func:append(?listconstraints ?clipsconstraint))])
            Modify(?slotitems["add-args-as-constraints-from"^^rif:local -> External(func:remove(?itemlist 0))])
          )
        )

        (* self:rule12 *) Forall ?riflist ?defrule ?rest ?multifieldvar ?rest ?clipsrestvar (
          If And (
            ?riflist[rif:rest -> ?rest]
            ?riflist[ex:add-as-pattern -> ?defrule]
            ?riflist[modelA:binds-variable -> ?clipsrestvar]
            Not (?defrule[ex:bound-variable -> ?clipsrestvar])
            ?rest[ex:as-expression -> ?clipsrestvar]
            "combine-multifield-as-list"^^rif:local( ?rest ?multifieldvar )
            ?rest # rif:Var
          ) Then Do (
            (?function New())
            (?expand New())
            Assert( ?clipsrestvar[cs:var-as-const-expr -> ?function] )
            Assert( ?function[cs:function-name -> "<http://www.w3.org/2007/rif-builtin-function#make-list>"] )
            Assert( ?function[cs:function-args -> External(func:make-list(?expand))] )
            Assert( ?expand[cs:function-name -> "expand$"] )
            Assert( ?expand[cs:function-args -> External(func:make-list(?multifieldvar))] )

          )
        )
        Group -1 (
          (* self:rule13 *) Forall ?defrule ?riflist ?pattern ?listasvar (
            If And (
              ?riflist # rif:List
              ?riflist[ex:add-as-pattern -> ?defrule]
              ?riflist[ex:as-lhs-pattern -> ?pattern]
              ?riflist[ex:as-constraint -> ?listasvar]
              Not( ?defrule[ex:bound-variable -> ?listasvar] )
              Not (Exists ?x ( And(
                ?pattern[ex:needs-variable -> ?x]
                Not( ?defrule[ex:bound-variable -> ?x] )
              )))
              Not( ?riflist[ex:used-as-pattern-in -> ?defrule] )
            ) Then Do (
              (?assignpattern New())
              (?oldpatternlist ?defrule[cs:conditional-element -> ?oldpatternlist])
              Assert( ?riflist[ex:used-as-pattern-in -> ?defrule] )
              Assert( ?assignpattern # cs:AssignedPatternCE )
              Assert( ?assignpattern[cs:pattern-ce -> ?pattern] )
              Assert( ?assignpattern[cs:fact-var-symbol -> ?listasvar] )
              Modify( ?defrule[cs:conditional-element -> External(func:append(?oldpatternlist ?assignpattern))] )
              Assert( ?defrule[ex:transfer-bound-variables-from -> ?pattern] )
            )
          )
          (* self:rule14 *) Forall ?defrule ?riflist ?pattern ?listasvar (
            If And (
              ?riflist # rif:List
              ?riflist[ex:add-as-pattern -> ?defrule]
              ?riflist[ex:as-lhs-pattern -> ?pattern]
              ?riflist[ex:as-constraint -> ?listasvar]
              ?defrule[ex:bound-variable -> ?listasvar]
              Not (Exists ?x ( And(
                ?pattern[ex:needs-variable -> ?x]
                Not( ?defrule[ex:bound-variable -> ?x] )
              )))
              Not( ?riflist[ex:used-as-pattern-in -> ?defrule] )
            ) Then Do (
              (?assignpattern New())
              (?tmplistasvar New())
              (?testvarpattern New())
              (?testvaraction New())
              (?oldpatternlist ?defrule[cs:conditional-element -> ?oldpatternlist])
              Assert( ?tmplistasvar # cs:Variable )
              Assert( ?tmplistasvar # ex:Variable )

              Assert( ?testvarpattern # cs:TestCE )
              Assert(?testvarpattern[cs:function-call -> ?testvaraction])
              Assert(?testvaraction[cs:function-name -> "eq"])
              Assert(?testvaraction[cs:function-args -> External(func:make-list( ?listasvar ?tmplistasvar))])

              Assert( ?riflist[ex:used-as-pattern-in -> ?defrule] )
              Assert( ?assignpattern # cs:AssignedPatternCE )
              Assert( ?assignpattern[cs:pattern-ce -> ?pattern] )
              Assert( ?assignpattern[cs:fact-var-symbol -> ?tmplistasvar] )
              Modify( ?defrule[cs:conditional-element -> External(func:append(?oldpatternlist ?assignpattern ?testvarpattern))] )
              Assert( ?defrule[ex:transfer-bound-variables-from -> ?pattern] )
            )
          )
        )
  )
)
