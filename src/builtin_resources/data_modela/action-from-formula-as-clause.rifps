Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Group (
      Forall ?rifrule ?clause (
        If And (
          Or (
            ?rifrule[rif:then -> ?clause]
            ?rifrule[rif:formula -> ?clause]
          )
          Or (
            ?clause[rdf:type -> rif:Frame]
            ?clause[rdf:type -> rif:Atom]
            ?clause[rdf:type -> rif:SubClass]
            ?clause[rdf:type -> rif:Member]
          )
        ) Then Do (
          (?clipsaction New())
          Assert( ?clause[ex:as-action -> External(func:make-list(?clipsaction))] )
          Assert( ?clipsaction[ex:assert-uses-pattern-from -> ?clause] )
        )
      )
      Forall ?rifassert ?clause (
        If And (
          ?rifassert[rdf:type -> rif:Assert]
          ?rifassert[rif:target -> ?clause]
          Or (
            ?clause[rdf:type -> rif:Frame]
            ?clause[rdf:type -> rif:Atom]
            ?clause[rdf:type -> rif:SubClass]
            ?clause[rdf:type -> rif:Member]
          )
        ) Then Do (
          (?clipsaction New())
          Assert( ?rifassert[ex:as-action -> External(func:make-list(?clipsaction))] )
          Assert( ?clipsaction[ex:assert-uses-pattern-from -> ?clause] )
        )
      )
      Forall ?rifretract ?clause (
        If And (
          ?rifretract[rdf:type -> rif:Retract]
          ?rifretract[rif:target -> ?clause]
          Or (
            ?clause[rdf:type -> rif:Frame]
            ?clause[rdf:type -> rif:Atom]
            ?clause[rdf:type -> rif:SubClass]
            ?clause[rdf:type -> rif:Member]
          )
        ) Then Do (
          (?clipsaction New())
          Assert( ?rifretract[ex:as-action -> External(func:make-list(?clipsaction))] )
          Assert( ?clipsaction[cs:function-name -> "retract"] )
          Assert( ?clipsaction[cs:function-args -> External(func:make-list())] )
          Assert( ?clipsaction[ex:retract-uses-pattern-from -> ?clause] )
        )
      )
      Forall ?rifretract ?rifterm ?clipsterm(
        If And (
          ?rifretract[rdf:type -> rif:Retract]
          ?rifretract[rif:target -> ?rifterm]
          ?rifterm[ex:as-expression -> ?clipsterm]
        ) Then Do (
          (?clipsretract New())
          (?expandtriples New())
          (?findtriples New())
          (?tmpvar New())
          (?tripletemplate New())
          (?triplequery New())
          (?slotsubj New())
          Assert( ?rifretract[ex:as-action -> External(func:make-list(?clipsretract))] )
          Assert( ?clipsretract[cs:function-name -> "retract"] )
          Assert( ?clipsretract[cs:function-args -> External(func:make-list(?expandtriples))] )
          Assert( ?expandtriples[cs:function-name -> "expand$"] )
          Assert( ?expandtriples[cs:function-args -> External( func:make-list(?findtriples))] )
          Assert( ?findtriples[rdf:type -> cs:FindAllFacts] )
          Assert( ?findtriples[cs:fact-set-template -> ?tripletemplate] )
          Assert( ?findtriples[cs:query -> ?triplequery] )
          Assert( ?tripletemplate[cs:deftemplate-name -> "TripleTemplate"] )
          Assert( ?tripletemplate[cs:fact-set-member-variable -> ?tmpvar] )
          Assert( ?triplequery[cs:function-name -> "eq"] )
          Assert( ?triplequery[cs:function-args -> External(func:make-list(?clipsterm ?slotsubj))] )
          Assert( ?slotsubj[cs:member-variable -> ?tmpvar] )
          Assert( ?slotsubj[cs:member-slot-name -> "subject"] )
          Assert( ?tmpvar[rdf:type -> cs:Variable] )
        )
      )
      Forall ?rifmodify ?clause ?rifobject ?subjterm (
        If And (
          ?rifmodify[rdf:type -> rif:Modify]
          ?rifmodify[rif:target -> ?clause]
          ?clause[rdf:type -> rif:Frame]
          ?clause[rif:object -> ?rifobject]
          ?rifobject[ex:as-expression -> ?subjterm]
        ) Then Do (
          (?clipsretractall New())
          (?clipsretractvar New())
          (?tmpvar New())
          (?clipsassert New())
          (?tripletemplate New())
          (?comparesubjectandpredicate New())
          (?comparepredicate New())
          (?comparesubject New())
          (?slotsubj New())
          Assert( ?tmpvar[rdf:type -> cs:Variable] )
          Assert( ?rifmodify[ex:as-action -> External(func:make-list(?clipsretractall ?clipsassert))] )
          Assert( ?clipsretractall[rdf:type -> cs:DoForAllFacts] )
          Assert( ?clipsretractall[cs:fact-set-template -> ?tripletemplate] )
          Assert( ?tripletemplate[cs:deftemplate-name -> "TripleTemplate"] )
          Assert( ?tripletemplate[cs:fact-set-member-variable -> ?tmpvar] )
          Assert( ?clipsretractall[cs:query -> ?comparesubjectandpredicate])
          Assert( ?comparesubjectandpredicate[cs:function-name -> "and"] )
          Assert( ?comparesubjectandpredicate[cs:function-args -> External(func:make-list(?comparesubject ?comparepredicate))] )
          Assert( ?comparesubject[cs:function-name -> "eq"] )
          Assert( ?comparesubject[cs:function-args -> External(func:make-list(?slotsubj ?subjterm))] )
          Assert( ?slotsubj[cs:member-variable -> ?tmpvar] )
          Assert( ?slotsubj[cs:member-slot-name -> "subject"] )
          Assert( ?comparepredicate[cs:function-name -> "or"] )
          Assert( ?comparepredicate[cs:function-args -> External(func:make-list())] )
          Assert( ?comparepredicate[ex:compare-slotkeys-varpredicate-rifframe -> ?clause] )
          Assert( ?comparepredicate[ex:compare-slotkeys-varpredicate-tmpvar -> ?tmpvar] )
          Assert( ?comparepredicate[ex:add-compare-predicate-from -> ?clause] )
          Assert( ?clipsretractall[cs:action -> External(func:make-list(?clipsretractvar))])
          Assert( ?clipsretractvar[cs:function-name -> "retract"] )
          Assert( ?clipsretractvar[cs:function-args -> External(func:make-list(?tmpvar))] )
          Assert( ?clipsassert[ex:assert-uses-pattern-from -> ?clause] )
        )
      )
      Forall ?comparepredicate ?tmpvar ?rifframe ?slotlist ?slot ?slotkey ?slotkeyterm (
        If And (
          ?comparepredicate[ex:compare-slotkeys-varpredicate-rifframe -> ?rifframe]
          ?comparepredicate[ex:compare-slotkeys-varpredicate-tmpvar -> ?tmpvar]
          ?rifframe[rif:slots -> ?slotlist]
          External(pred:is-list(?slotlist))
          1 = External(func:count(?slotlist))
          ?slot[rif:slotkey -> ?slotkey]
          External(pred:list-contains(?slotlist ?slot))
          ?slotkey[ex:as-expression -> ?slotkeyterm]
        ) Then Do (
          (?slotpred New())
          Assert( ?slotpred[cs:member-variable -> ?tmpvar] )
          Assert( ?slotpred[cs:member-slot-name -> "predicate"] )
          Modify( ?comparepredicate[cs:function-name -> "eq"] )
          Modify( ?comparepredicate[cs:function-args -> External(func:make-list(?slotpred ?slotkeyterm))] )
        )
      )

      Forall ?clipsassert ?rifformula ?rhspattern (
        If And (
          ?clipsassert[ex:assert-uses-pattern-from -> ?rifformula]
          ?rifformula[ex:as-rhspattern -> ?rhspattern]
        ) Then Do (
          Assert( ?clipsassert[cs:assert -> ?rhspattern] )
        )
      )
      Forall ?clipsretract ?rifformula ?rhspattern (
        If And (
          ?clipsretract[ex:retract-uses-pattern-from -> ?rifformula]
          ?rifformula[ex:as-rhspattern -> ?rhspattern]
        ) Then Do (
          (?clipsassert New())
          (?retracttargets ?clipsretract[cs:function-args -> ?retracttargets])
          Modify( ?clipsretract[cs:function-args -> External(func:append(?retracttargets ?clipsassert))] )
          Assert( ?clipsassert[cs:assert -> ?rhspattern] )
        )
      )

      Forall ?rifatom ?op ?expressionop ?arglist (
        If And (
          ?rifatom[rif:op -> ?op]
          ?op[ex:as-expression -> ?expressionop]
          ?rifatom[rif:args -> ?arglist]
          External(pred:is-list(?arglist))
        ) Then Do (
          (?rhspattern New())
          (?slotop New())
          (?slotargs New())
          Assert( ?rifatom[ex:as-rhspattern -> ?rhspattern] )
          Assert( ?rhspattern[cs:deftemplate-name -> "Atom"] )
          Assert( ?rhspattern[cs:slot -> External(func:make-list(?slotop ?slotargs))] )
          Assert( ?slotop[cs:slot-name -> "op"] )
          Assert( ?slotop[cs:field -> External(func:make-list(?expressionop))] )
          Assert( ?slotargs[cs:slot-name -> "args"] )
          Assert( ?slotargs[cs:field -> External(func:make-list())] )
          Assert( ?slotargs[ex:add-atom-args-rhspattern -> ?arglist] )
          Assert( ?slotargs[ex:brubru -> ?arglist] )
        )
      )
      Forall ?rifatom ?op ?expressionop (
        If And (
          ?rifatom[rif:op -> ?op]
          ?op[ex:as-expression -> ?expressionop]
          Not( Exists ?arglist (?rifatom[rif:args -> ?arglist]))
        ) Then Do (
          (?rhspattern New())
          (?slotop New())
          (?slotargs New())
          Assert( ?rifatom[ex:as-rhspattern -> ?rhspattern] )
          Assert( ?rhspattern[cs:deftemplate-name -> "Atom"] )
          Assert( ?rhspattern[cs:slot -> External(func:make-list(?slotop ?slotargs))] )
          Assert( ?slotop[cs:slot-name -> "op"] )
          Assert( ?slotop[cs:field -> External(func:make-list(?expressionop))] )
          Assert( ?slotargs[cs:slot-name -> "args"] )
          Assert( ?slotargs[cs:field -> External(func:make-list())] )
        )
      )
      Group 10 (
        Forall ?slotargs ?arglist ?firstarg ?clipsexpr(
          If And (
            ?slotargs[ex:add-atom-args-rhspattern -> ?arglist]
            ?firstarg[ex:as-expression -> ?clipsexpr]
            ?firstarg = External(func:get(?arglist 0))
          ) Then Do (
            (?oldfield ?slotargs[cs:field -> ?oldfield])
            Modify(?slotargs[ex:add-atom-args-rhspattern -> External(func:remove(?arglist 0))])
            Modify( ?slotargs[cs:field -> External(func:append(?oldfield ?clipsexpr))] )
          )
        )
        Group -100 (
          Forall ?clipsfunction ?rifrestargs (
            If And (
              ?clipsfunction[ex:add-atom-args-rhspattern -> ?rifrestargs]
              External( pred:numeric-not-equal(0 External(func:count(?rifrestargs))) )
            ) Then Do (
              Execute(crifi:set-graph-in-errorstate("Translation of rif:Atom to rhs-pattern failed. Didnt translated all rif:args."))
            )
          )
        )
        Forall ?slotargs (
          If ?slotargs[ex:add-atom-args-rhspattern -> List()]
          Then Do(
            Retract(?slotargs[ex:add-atom-args-rhspattern -> List()])
          )
        )
      )

      (* ex:as-expression-transform-rif-frame *) Forall ?rifnode ?slotlist ?slot ?currentconditionalelement ?clipsrestraint ?slotvalue ?slotkey ?constraintsubject (
        If And (
          ?rifnode[rif:object -> ?object]
          ?rifnode[rif:slots -> ?slotlist]
          ?slot[rif:slotkey -> ?slotkey]
          ?slot[rif:slotvalue -> ?slotvalue]
          External(pred:is-list(?slotlist))
          External(pred:list-contains(?slotlist ?slot))
          ?object[ex:as-expression -> ?expressionsubject]
          ?slotkey[ex:as-expression -> ?expressionpredicate]
          ?slotvalue[ex:as-expression -> ?expressionobject]
        ) Then Do (
          (?rhspattern New())
          (?slotsubject New())
          (?slotpredicate New())
          (?slotobject New())
          Assert( ?rifnode[ex:as-rhspattern -> ?rhspattern] )
          Assert( ?rhspattern[cs:deftemplate-name -> "TripleTemplate"] )
          Assert( ?rhspattern[cs:slot -> External(func:make-list(?slotsubject ?slotpredicate ?slotobject))] )
          Assert( ?slotsubject[cs:slot-name -> "subject"] )
          Assert( ?slotsubject[cs:field -> External(func:make-list(?expressionsubject))])
          Assert( ?slotpredicate[cs:slot-name -> "predicate"] )
          Assert( ?slotpredicate[cs:field -> External(func:make-list(?expressionpredicate))])
          Assert( ?slotobject[cs:slot-name -> "object"] )
          Assert( ?slotobject[cs:field -> External(func:make-list(?expressionobject))])
        )
      )
    )
)
