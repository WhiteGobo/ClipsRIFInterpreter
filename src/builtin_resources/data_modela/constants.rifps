Document(
    Prefix(func <http://www.w3.org/2007/rif-builtin-function#>) 
    Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>) 
    Prefix(owl <http://www.w3.org/2002/07/owl#>)
    Prefix(deffact <http://white.gobo/crifi/resource-manager/deffacts#>)
    Prefix(rema <http://white.gobo/crifi/resource-manager#>)
    Prefix(cs <http://clips.script/>)
    Prefix(crifi <http://white.gobo/>)
    Prefix(ex <http://example.com/>)
    Prefix(triplestordf <http://example.com/triples-to-rdf#>)
    Prefix(rif <http://www.w3.org/2007/rif#>)
    Prefix(entailment <http://www.w3.org/ns/entailment/>)
    Group(
      Group (
        Forall ?factvar (
          If And (
            ?factvar[rdf:type -> cs:Variable]
            ex:currentfactindex(?factindex)
            Not (Exists ?factname ( ?factvar[cs:variable-name -> ?factname] ))
          ) Then Do (
            Retract( ex:currentfactindex(?factindex) )

            Assert( ex:currentfactindex(External(func:numeric-add(?factindex 1))))
            Assert( ?factvar[cs:variable-name -> External(func:concat("fct" ?factindex))] )

          )
        )
        ex:currentfactindex(1)
      )
      (* ex:rif-inheritance *) Group (
        Forall ?parent ?child (
          If And (
            Or (
              ?parent[rif:formula -> ?child]
              ?parent[rif:object -> ?child]
              ?parent[rif:if -> ?child]
              ?parent[rif:then -> ?child]
              ?parent[rif:target -> ?child]
              ?parent[rif:content -> ?child]
              ?parent[rif:op -> ?child]
              ?parent[rif:payload -> ?child]
              ?parent[rif:pattern -> ?child]
            )
          ) Then Do (
            Assert( ?parent[ex:inherits-data -> ?child] )
          )
        )
        Forall ?parent ?slotlist ?slot ?childkey ?childvalue (
          If And (
            ?parent[rif:slots -> ?slotlist]
            External(pred:is-list(?slotlist))
            ?slot[rif:slotkey -> ?childkey]
            ?slot[rif:slotvalue -> ?childvalue]
            External(pred:list-contains(?slotlist ?slot))
          ) Then Do (
            Assert( ?parent[ex:inherits-data -> ?childkey] )
            Assert( ?parent[ex:inherits-data -> ?childvalue] )
          )
        )
        Forall ?parent ?childlist ?child (
          If And (
            Or (
              ?parent[rif:sentences -> ?childlist]
              ?parent[rif:formulas -> ?childlist]
              ?parent[rif:actions -> ?childlist]
            )
            External(pred:is-list(?childlist))
            Or (
              ?child[rdf:type -> rif:Group]
              ?child[rdf:type -> rif:Forall]
              ?child[rdf:type -> rif:Frame]
              ?child[rdf:type -> rif:Atom]
              ?child[rdf:type -> rif:Assert]
              ?child[rdf:type -> rif:Retract]
              ?child[rdf:type -> rif:Do]
              ?child[rdf:type -> rif:Modify]
              ?child[rdf:type -> rif:Subclass]
              ?child[rdf:type -> rif:Equal]
              ?child[rdf:type -> rif:Member]
            )
            External(pred:list-contains(?childlist ?child))
          ) Then Do (
            Assert( ?parent[ex:inherits-data -> ?child] )
          )
        )
        Forall ?rifdo ?actionvar ?rifvar ?varname ?rifframe(
          If And (
            ?rifdo[rif:actionVar -> ?actionvar]
            External(pred:is-list(?actionvar))
            ?rifvar[rif:varname -> ?varname]
            ?rifframe[rdf:type -> rif:Frame]
            External(pred:list-contains(?actionvar ?rifvar))
            External(pred:list-contains(?actionvar ?rifframe))
          ) Then Do (
            Assert( ?rifvar[ex:inherits-data -> ?rifframe] )
            Assert( ?rifvar[ex:inherits-data -> ?rifdo] )
          )
        )

        Forall ?parent ?child ?grandchild (
          If And (
            ?parent[ex:inherits-data -> ?child]
            ?child[ex:inherits-data -> ?grandchild]
          ) Then Do (
            Assert( ?parent[ex:inherits-data -> ?grandchild])
          )
        )
      )
      (* ex:transform-terms-asdf *) Group (
        Forall ?rifdo ?actionvar ?rifvar ?varname (
          If And (
            ?rifdo[rif:actionVar -> ?actionvar]
            External(pred:is-list(?actionvar))
            ?rifvar[rif:varname -> ?varname]
            External(pred:list-contains(?actionvar ?rifvar))
          ) Then Do (
            (?clipsnode New())
            Assert(?rifvar[ex:as-constraint -> ?clipsnode])
            Assert(?rifvar[ex:as-expression -> ?clipsnode])
            Assert(?clipsnode[cs:variable-name -> ?varname])
            Assert(?clipsnode[ex:as-constraint-needs-additional-conditionals -> External(func:make-list())])
            Assert( ?rifvar[ex:inherits-data -> ?rifdo] )
          )
        )
        Forall ?rifforall ?varlist ?rifvar ?varname (
          If And (
            ?rifforall[rif:vars -> ?varlist]
            External(pred:is-list(?varlist))
            ?rifvar[rif:varname -> ?varname]
            External(pred:list-contains(?varlist ?rifvar))
          ) Then Do (
            Assert( ?rifvar[ex:inherits-data -> ?rifforall] )
          )
        )
        Forall ?rifforall ?varlist ?rifvar ?varname (
          If And (
            ?rifforall[rdf:type -> rif:Forall]
            ?rifforall[rif:vars -> ?varlist]
            External(pred:is-list(?varlist))
            ?rifvar[rif:varname -> ?varname]
            External(pred:list-contains(?varlist ?rifvar))
          ) Then Do (
            (?clipsnode New())
            Assert(?rifvar[ex:as-constraint -> ?clipsnode])
            Assert(?rifvar[ex:as-expression -> ?clipsnode])
            Assert(?clipsnode[cs:variable-name -> ?varname])
            Assert(?clipsnode[ex:as-constraint-needs-additional-conditionals -> External(func:make-list())])
          )
        )
        Forall ?rifforall ?varlist ?rifvar ?varname ?rifvarchild(
          If And (
            ?rifexists[rdf:type -> rif:Exists]
            ?rifexists[rif:vars -> ?varlist]
            External(pred:is-list(?varlist))
            ?rifvar[rif:varname -> ?varname]
            External(pred:list-contains(?varlist ?rifvar))
            Not( Exists ?expr (?rifvar[ex:as-expression -> ?expr]))
            ?rifvarchild[rif:varname -> ?varname]
            ?rifvar[ex:inherits-data -> ?rifvarchild]
            ?rifframe[rif:object -> ?rifvarchild]
            ?rifframe[ex:as-expression -> ?factvar]
          ) Then Do (
            (?clipsnode New())
            Assert(?rifvar[ex:as-constraint -> ?clipsnode])
            Assert(?rifvar[ex:as-expression -> ?clipsnode])
            Assert( ?clipsnode[cs:member-variable -> ?factvar] )
            Assert( ?clipsnode[cs:member-slot-name -> "subject"] )
            Assert( ?clipsnode[ex:as-constraint-needs-additional-conditionals -> External(func:make-list())])
          )
        )
        Forall ?rifforall ?varlist ?rifvar ?varname ?rifvarchild ?slotlist ?rifslot(
          If And (
            ?rifexists[rdf:type -> rif:Exists]
            ?rifexists[rif:vars -> ?varlist]
            External(pred:is-list(?varlist))
            ?rifvar[rif:varname -> ?varname]
            External(pred:list-contains(?varlist ?rifvar))
            Not( Exists ?expr (?rifvar[ex:as-expression -> ?expr]))
            ?rifvarchild[rif:varname -> ?varname]
            ?rifvar[ex:inherits-data -> ?rifvarchild]
            ?rifframe[rif:slots -> ?slotlist]
            External(pred:is-list(?slotlist))
            ?rifslot[rif:slotkey -> ?rifvarchild]
            External(pred:list-contains(?slotlist ?rifslot))
            ?rifframe[ex:as-expression -> ?factvar]
          ) Then Do (
            (?clipsnode New())
            Assert(?rifvar[ex:as-constraint -> ?clipsnode])
            Assert(?rifvar[ex:as-expression -> ?clipsnode])
            Assert( ?clipsnode[cs:member-variable -> ?factvar] )
            Assert( ?clipsnode[cs:member-slot-name -> "predicate"] )
            Assert( ?clipsnode[ex:as-constraint-needs-additional-conditionals -> External(func:make-list())])
          )
        )
        Forall ?rifforall ?varlist ?rifvar ?varname ?rifvarchild ?slotlist ?rifslot(
          If And (
            ?rifexists[rdf:type -> rif:Exists]
            ?rifexists[rif:vars -> ?varlist]
            External(pred:is-list(?varlist))
            ?rifvar[rif:varname -> ?varname]
            External(pred:list-contains(?varlist ?rifvar))
            Not( Exists ?expr (?rifvar[ex:as-expression -> ?expr]))
            ?rifvarchild[rif:varname -> ?varname]
            ?rifvar[ex:inherits-data -> ?rifvarchild]
            ?rifframe[rif:slots -> ?slotlist]
            External(pred:is-list(?slotlist))
            ?rifslot[rif:slotvalue -> ?rifvarchild]
            External(pred:list-contains(?slotlist ?rifslot))
            ?rifframe[ex:as-expression -> ?factvar]
          ) Then Do (
            (?clipsnode New())
            Assert(?rifvar[ex:as-constraint -> ?clipsnode])
            Assert(?rifvar[ex:as-expression -> ?clipsnode])
            Assert( ?clipsnode[cs:member-variable -> ?factvar] )
            Assert( ?clipsnode[cs:member-slot-name -> "object"] )
            Assert( ?clipsnode[ex:as-constraint-needs-additional-conditionals -> External(func:make-list())])
          )
        )
        Forall ?varchild ?varparent ?varname ?clipsvar(
          If And (
            ?varparent[ex:inherits-data -> ?varchild]
            ?varparent[rif:varname -> ?varname]
            ?varchild[rif:varname -> ?varname]
            ?varparent[ex:as-expression -> ?clipsvar]
          ) Then Do (
            Assert(?varchild[ex:as-expression -> ?clipsvar])
            Assert(?varchild[ex:as-constraint -> ?clipsvar])
          )
        )
      )

      (* ex:transform-rif-consts *) Group (
        (* ex:value-to-constraint *) Forall ?rifnode ?value (
          If And(
            ?rifnode[rif:value -> ?value]
          ) Then Do ((?clipsnode New())
            Assert(?rifnode[ex:as-constraint -> ?clipsnode])
            Assert(?rifnode[ex:as-expression -> ?clipsnode])
            Assert(?clipsnode[cs:string -> External(crifi:literal-to-clipsconstant(?value))])
            Assert(?clipsnode[ex:as-constraint-needs-additional-conditionals -> External(func:make-list())])
          )
        )
        (* ex:constIRI-to-constraint *) Forall ?rifnode ?iristring(
          If And(
            ?rifnode[rif:constIRI -> ?iristring]
          ) Then Do ((?clipsnode New())
            Assert( ?rifnode[ex:as-constraint -> ?clipsnode] )
            Assert( ?rifnode[ex:as-expression -> ?clipsnode] )
            Assert( ?clipsnode[cs:symbol -> External( crifi:iri-to-clipsconstant(?iristring))] )
            Assert(?clipsnode[ex:as-constraint-needs-additional-conditionals -> External(func:make-list())])
          )
        )
      )
    )
)
